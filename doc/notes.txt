

ACNTRL - section 0 - overall control 
	calls: 
	INITAL - initialize
	ASCNTL - section 1  language, parse, store canon forms
	A2CTRL - section 2 - calculate cut vectors from motion commands
	SECTN3 - section 3 - COPY and TRACUT transforms
	APTPOS - section 4 - post process	

****************************************************************

ASCNTL - (section 1)  language, parse, store canon forms
	calls: 
	AMONTR -pass 1 control
	ASYCTL -pass 2 control
	ATAPRD - asm.
	ATAPOP - asm.

****************************************************************

A2CTRL	(section 2)  motion, cut vectors 
	calls: 

	ASEC2    calls various sec 2 routines:
	calls: 
		ASEC2A    calls ARPDIS dispatch to  ARELEM3 or ARELEM2 (via AREPRE - arelem pre?)
		ASEC2B    calls ARPDIS dispatch to  ARELEM3 or ARELEM2
		ASEC2C    calls (same as above)
		ASEC2D
		
		ARLM2  2d ARELEM  
		ARLM3  3d ARELEM 


*******************************************

AMONTR -pass 1 control
	AMON1 - read in a card
	ASCAN - break up card, put in elment table
	AMON2 - detect and store statement identifiers in VST
	AMON3 - enter symbols in vst
	AMON4 - store statements of macros and loops
		AMATMV - move from ptpp area to canon
	AMON5 - 
	AMON6 - 
	AMON7
	AMON8 - nests and assignment statements
	AMON10 - process vocabulary words 1-10
	AMON11 - 
	AFINI - 
	APRINT - 
	ADIAGP - diagnostic print	
	APTPUT - write ptpp record to ptpp area, then tape when full
	ACLAS7 - write class 7 record to ptpp, call aptput
	IATYPE - 
	APAREN - 

********************************************
ASCAN - 
	ATBLKP - keyword lookup
	AEXTRC - extract character, classify
	ABUILD - build up word
	ADIAGP - diagnostic print

********************************************

ASYCTL -pass 2 control


********************************************
2d routines ARLM2 : 
	calls: 
		ADSCF - 2d  DS  canonical form - determine canon values , circle or line
		ACSCF - 2d  CS  canonical form - determine canon values , circle or line

		AZCOR   z correction - "CORRECTS COMPUTED CUTTER LOCATION FOR Z VALUE
		     MORE ACCURATELY8 MOVES CUTTER UP OR DOWN ALONG ITS AXIS
		      UNTIL THE CUTTER END POINT IS IN A PLANE PARALLEL TO
		      THE PART SURVACE PLANE, AND WHICH PLANE ALSO CONTAINS THE
		      ORIGINAL CUTTER END POINT TE , WHERE THE CUTTER WAS AT THE
		     START OF I-D PROCESSING"


		ASEGMT 	"SEGMENTS A CIRCULAR DRIVE SURFACE
			GENERAL CALCULATION PROCEESS IS AS FOLLOWS...
			INITIALLY, SET UP SOME VALUES TO BE USED LATER
			RBIG IS LARGE RADIUS RSMAL IS SMALL RADIUS OF TOLERANCE BAND
			RTE IS VECTOR FROM CENTER OF CIRCLE TO TE POSITION
			F   RFP IS VECTOR FROM CENTER TO FINAL POINT FPNT
			SET UP SENSE = + OR - 1. FOR CLOCKWISE OR COUNTERCLOCKWISE
			MOTION REQUIRED.      THEN COMPUTE THE ANGULAR DIFFERENCE
			BETWEEN THE POINTS  DELTAN
			WHICH HAS BEEN CORRECTED FOR MULTIPLE REVOLUTIONS
			ALSO COMPUTE THE MAXIMUM ALLOWABLE ANCLE  DECIDE WOW MANY
			STEPS ARE REQUIRED, AND SEGMENT
			DO NOT OUPUT THE LAST POINT, AS THAT IS DONE BY ARLMI"

		AORDP	order points in direction of travel

		ADYNDP,BDYNDP - debug dump?
		ASELP	select final point based on TO, ON, PAST, TANTO



3d routines ARLM3 : 
	calls: 
		ACENTR  -  3d TO ITERATE THE CUTTER INTO A POSITION WITHIN THE SPECIFIED TOLERANCE OF TWO OR THREE SURFACES.
			calls ACNTR2 - a continuation	

		APLANE - references TLON, TANTO, etc.

		ADYNDP,BDYNDP - 
		
		ACHECK - check surface 
		
		ADELTA - step vector calc for calculating if the cut vector satisfies INTOL/OUTOL

		AMIND -  minimum distance to a surface
	
		ATLNRM -  tool normal ? only calls vector subroutines

		ATAPE - write data to tape

	routines in ACENTR, ACNTR2:
	calls: 
			AMIND - minimum distance 
				calls AJUNDD 
					calls ADDST and ARADAR (calls ANRMAL)
							
			
			ADYNDP-assembler; calls BDYNDP
			
			ADDST - directed distance DDPLAN, DDCYLN, DDQUAD, DDCONE, DDSPHR

			ATLTST - tolerance test

			ATINKR - multi axis processing

			APLNEX - TO CALCULATE A VECTOR, CMOVE, WHICH, IF APPLIED AT TE POSITION,
				WILL MOVE THE CUTTER TO SIMULTANEOUS CONTACT WITH THREE PLANES.
				RETURN VARIALBE    JPXR = 0  CMOVE CALCULATION OK
				JPXR = 1  UNABLE TO CALCULATE CMOVE
				


			
			ACPLAN - check surface plane 

	routines in APLANE:
	calls: 

			ACHECK - see above

			ACENTR - ditto
***********************************************************
Surface Types:
1:point
2:line
3:plane
4:circle
5:cylinder
6:
7:
8:cone
9:
10:
11:vector
12:
13:sphere
14:
***********************************************************
struct {
    doublereal elment[600];
    integer iclass[600], jlment;
} ailmtb_;

This structure represents a statement broken into its elements for entry into ptpp 
and eventual use of pass 2 of section 1.  

Each iclass word represents a code for the type of element it is; a keyword will get
a class/subclass entry; a slash will get the code 0x304, etc.

iclass:
	1- variable symbol
	2- vocabulary word
	3- number
	4- punctuation
	5- nested computing expression
	6- nested surface definition

elment carries specific info about the element; for example, a DELAY statement would have
the number following the slash entered in elment as a float value. The iclass entry would 
have 3 entries for the keyword class/subclass, the slash, and the number. 



punctuation codes in BLOCK2.c

jlment is the number of elements (iclass words) entered

next step is placement into aptpp and then into ptpp (vst)

***********************************************************

struct {
	doublereal vst[2750],
	ptpp[2225],
	canon[2225];
} avst_;


***********************************************************
struct {
    doublereal pt[300];
    integer inptp, nw, jmode, klass, klastp, irecn, npt, npr;
} aptpp_;

this structure is built using ailmtb_ to obtain needed information
then stored in avst_.ptpp and then to poc.tap

klass - vocabulary classes
	1 fixed field statement eg, partno
	2 ARELEM parameters
	3 ARELEM parameters
	4 input /output
	5 OBTAIN
	6 ZSURF	
	7 special program call
	8 REFSYS
	9 IF statement
	10 JUMPTO statement
see AXTABL.ASM.c for more keywords

klastp - class subtype

inptp - number of items in structure in doublewords
jmode -	  =1 - BEGINNING CLASS OF DATA 
          =2 - CONTINUATION OF CLASS 
          =3 - TERMINATION OF CLASS 
          =4 - ERASE PTPP CLASS 
          =5 - COMPLETE CLASS OF DATA 
          =6 - FLUSH PTPP BUFFER 
-------
ptpp classes:
	     CLASS 1 - ORIGINAL INPUT STATEMENT WITH ISN - PRINT THEM OUT */
	     CLASS 2 - ERROR DIAGNOSTICS FROM PASS 1 */
		     CHECK FOR DIAGNOSTIC MESSAGE ONLY */
	     CLASSES 3 AND 14 - SURFACE DEFINITIONS - USE ADFPRE (1204) */
	     CLASS 4 - REFSYS - USE ARFSYS (1205) */
	     CLASS 5 - OUTPUT (PRINT, PUNCH, OR TITLES) - USE ACLAS5 (1213) */
	     CLASS 6 - COPY ONTO PROTAP, 2000 THROUGH */
	               9000 AND 11000 TYPE RECORDS - USE ACPYTP (1206) */
	     CLASS 7 - INPUT CARD SEQUENCE WITH STATEMENT ID AND ISN */
	    	 IF NO PROTAP RECORD TO BE OUTPUT,SAVE SEQ. NO. AND ISN FOR DIAG. */
	     CLASS 8 - FINI,DEBUG/ON OR OFF,PRINT/ON OR OFF -- CHECK FOR FINI */
	     CLASS 9 - OBTAIN - USE ASEQAL (1207) */
	     CLASS 10 - JUMPTO/ID - SET PTPP INDEX AND CHECK RANGE */
		     IF AN ERROR HAS OCURRED,DO NOT BRANCH */
	     CLASS 11 - IF(V)  ID1, ID2, ID3 */
	            SET PTPP INDEX AS V IS LT, EQ, OR GT 0 */
		    IF AN ERROR HAS OCURRED,DO NOT BRANCH */
	     CLASS 12 - COMPUTING EXPRESSION - USE ACLS12 (1214) */
		     TEST FOR UNARY MINUS RECORD */
	     CLASS 13 - SCALAR EQUALS EXPRESSION */
		     GET SCALAR INDEX OF NUMERIC VALUE TO BE ASSIGNED */
		     TO THE SCALAR VARIABLE */
	     CLASS 16 - ZSURF - USE AZSURF (1211) */
	     CLASS 17 - SPECIAL PROGRAM CALL - USE ACALSP (1212) */
	     CLASS 18 - CODES REQUIRED FOR IMPLIED CHECK SURFACE LOGIC */
	     CLASS 19  SET UP LOOPS FLAG TO INDICATE LOOP MODE FOR SEGMENTATION */
	     CLASS 20 - NESTED PARAMETER LIST - USE ARGLST (1208) */


-----------------------
this pseudo code structure isn't actually defined in the program, but it represents
my best guesstimate of how a ptpp record is laid out
-----------------------
struct ptppRec{

	integer classCode;//see classes listed above 
		//1- copy of line
		//2- error diagnostics from pass 1
		//3 - surface definitions
		//etc.
		//6- copy to protap
		//7-  input card sequence
		//8- fini
		etc..

	union{	
//------------------------------
		//class 1: (original input statement)
//------------------------------
		struct{	
			integer instructionNum;
			char lineCopy[]; 
		}

//------------------------------
		//class 3: (surface definitions)
//------------------------------
		struct{	
			int length; //length of ptpp record, minus 1 (in doubles)
			int surfDefCode;//surface definition code,ie,line,circle,etc
			int subscript;//subscript type
			int flag; //flag for surf read
			int namsub;// a1com_.namsub-index into vst for symbol
			}

			struct ptppEntries{
				int typeCode; //ptpp entry type, eg, variable, vocab word,etc.
					//1: number
					//2: variable symbol
					//3:expression
					//4:named surface
					//5:nested, unnamed surface
					//6:vocabulary word
					//7:statement id
					//8:punctuation
					//9: arg list (out of context)
				int pad;
				int entry1;
				int entry2; //varies depending on type-index to symbol in vst table,etc
				or: double numberVal;
				
			}
		}

//------------------------------
		//class 7:(input card sequence)
//------------------------------
		struct{	
			integer instructionNum;
			char lineCopy[]; 
		}
//------------------------------
		//class 12:
//------------------------------
		int length; //length of ptpp entry -1 (in doubles) 
		
	ptpp entries:
		int entryType; //eg, 6-vocabulary word 9- nested argument list
		double param;  //eg protap code for vocab, or number value, index to 
				//storage

//------------------------------
		//class 13: (scalar=...._)
//------------------------------
//------------------------------
		//class 20:
//------------------------------
		int length; //length of ptpp entry -1 
		int listno;
		int =0;
	ptpp entries:
		int entryType; //eg,surface=4		
		int ?
		int ?
		int vstIndex;
		
}

***********************************************************
Protap entries:

-Instruction 1:record -
1000: record id
2000: post processor params
3000: surface info, store canon forms, etc. -ASEC2D
4000:  TLLFT, TLRGT, etc. ASEC2C
5000: startup commands,from, goto,
6000: cutter def, tolerances, flags -ASEC2B
7000: movement commands ASEC2C
8000: end of movement command?

***********************************************************


this struct defines how the buffer area
for section one processing is laid out
struct {
    integer maxtab,  =7200 words - size of vst/ptpp/canon structure
	maxvs1, =1
	maxvs2, =1
	maxptp, = updated whenever a new maximum in ptpp table for later reporting
	maxscl, =0
	maxvs,  =0
	maxvst, =2750  length in words of vst, start of ptpp
	mxptpp, =2225 length in words of ptpp area
	mxcan,  =2225 length in words of canon area
	mxsrcn, =100
	maxslr, =5000
	maxelm, =600
	maxpot; =0
} amxtab_;




***********************************************************


struct {
    integer i__, j, k, l, movlge, kanmax, icanst, iovrec, kanptr, mdftab, 
	kancnt, kaux, kdfcnt, idefp, kprcnt, mdfpre, iprep, kovflp, 
	ksrfct, kovcnt, lscan, iovflo, maxcan, iref, icansc, namsta, 
	kango, lasptp, isub, lcomp, lgerec, irecn, jrec, jnum, kancur, 
	kancot, kdfent, kanpar, lgeloc, idtmov, ispprg,
	indexs,
	kptp, - record number?
	kptpct, 
	klastp, - ptpp class type : 1-20
	     	klasct, - number of words in ptpp class *except* classes 1,7,8
	kprnt;
} a1pas2_;


***********************************************************

struct {
    doublereal name__, krfsys;
    integer sum,
	jsuber, -error number 
	namsub,
	debug,
	indxpt, - pointer to current position in vst
	loop, 
	ifini; - flag set for end of program
} a1com_;

common variables for section one.  

***********************************************************
struct {
    integer istarp, // start point in iclass 
	iendp, //end of iclass in words
	nmove, 
	nl, 
	itsq, 
	lindx;
} aprtab_;

This structure used when searching for parentheses in iclass.
Used in APAREN when extracting nesting info.


struct {
    integer ilpcnt, //left paren count
	irpcnt, //right paren count
	lstnst;//last nest flag
} apartb_;

***********************************************************
struct {
    doublereal macnam[5]; //maximum of 5 macros can be nested
    integer maccur, //nesting level
	maclcn[5], 
	macrd, //flag set when reading macro from canon
	macstr[5],
	nmacvr, 
	numids,
	idlocn, 
	macids[5],
	isvid;
} amcstf_;

this stores macro nesting data

***********************************************************

section 2 common:

struct {
---offset 0
    doublereal sp[3], sn[3], tp[3], tn[3], snk[3], snl[3], spk[3], spl[3], 
	    tnk[3], tnl[3], tpk[3], tpl[3], plnv[3], cc[3], u1[3], cuth[3], 
	    sfvct[3], vndir[3], vmd[3], vt[3], tee[3], slx[3], dplan[3],
---offset 552  /4=138 /8=69
		 s[1],
	     rc[1], plnd[1], th[1], csd[1], z__[1], eps1[1], eps2[1], eps3[1],
	     eps4[1], eps6[1], eps8[1], tau[1], tau1[1], tau2[1], stck[1], 
	    stckn[1], stck1[1], stck2[1], cos1[1], dpmx1[1], cplfl[1], cptst[
	    1], plncs[1], plnd1[1], pltst[1], past[1], spast[1], adcs[1], h__[
	    1], cutr[1], 
--offset 800 /4=200 /8=100
		afillr[500];
--offset 4800 /4=1200 /8=600


//past - dist PAST surface?
//sp - surface point 
//sn - surface normal
//th - thickness
//tp-tool pt.
//tn-tool normal
//tau,eps, etc - float constants

--offset 4800 /4=1200 /8=600
    integer iafl[1], ipontr[1], ifar[1], ipl[1], iunfl[1], isftyp[1], itlon[1]
	    , isvfl[1], ifl4[1], iop[1], iopset[1], jiops[1], notan[1], jent[
	    1], ju1[1], isigcr[1], itseg[1], jtlflg[1], lofs[1], limfl[1], 
	    icstr[1], jtn[1], ichkct[1], j20[1], j21[1], j22[1], j23[1], j24[
	    1], j50[1], j51[1], indir__[1], ifillr[209];
--offset 5760 /4=1440 /8=720

//itlon - tool on part surface flag
//isvfl - surface vector flag
//indir__ - indirection flag
//iunfl - unit normal flag

--offset 5760 /4=1440 /8=720

    doublereal te[3], tek[3], tel[3], tes[3], ta[3], tak[3], tal[3], pmove[3],
	     ti[3], tik[3], til[3], u2[3], uvec[3], vtem[3], cmove[3], ex[3], 
	    ey[3], ez[3], vnul[3], tm[3], dir[3], axis[3], axis1[3], axis2[3],
	     axis3[3], refpnt[3], rgt[3], fwd[3], up[3], zlnorm[3], zlpnt[3], 
	    tndir[3], va[3], tmvcmp[3], p1[3], p2[3], pnt[3], pnt1[3], oldu1[
	    3], ogle[3], rzero[3], tanmot[3], tlend1[3], v[3], cend[3], 
	    delmot[3], d2[3], dnmot[3], ax4[3], a, b, c__, ra, hi, alpha, 
	    gamma, cagl, sagl, com1, com4, costh, ctocl, diam, dif, difout, 
	    dinc, dp, dpe, dpi, dpl, dpmax, dp1, dpcnt, dsmov, d1, d2a, el1, 
	    el2, fipnt, flipck, hafdia, hchord, offset, prod1, prod2, psi, 
	    radno, rc1, rdrm, rdrn, rone, rzerol, save1, siuth, tangl, theta, 
	    alp, eps7, vamax, vl, zdotc, zgamma, zign, zl, zl1, zl2, znpts, 
	    tolbnd, cendis, cenlen, chord, abcd[2], acard[2], save[6], cutdat[
	    7], tem[10], temp[20], tcdat[260], qequiv[20];

--offset 10048 /4=2512 /8=1256

//ex,ey,ez - unit normal vectors
//rc1 - radius of curvature of plane
//ta,tak,tal - tool axis vectors
//tcdat - tool cut data?

--offset 10048 /4=2512 /8=1256
    integer is, iis, it, iit, ips, iips, ids, iids, ics, iics, igs, iigs, 
	    icdefl, icdefs, iautps, igo, icrdct, icut, igtflg, inops, isrch, 
	    iofset, istrup, i3dflg, mulout, multax, numax, numsfs, numsur, 
	    igoug, ipdpl, numdim, irstrt, icscnt, i3, i31, j, ja, jl, js, jt, 
	    kc, knd, kr, l, incfs, np, ibegin, ifar1, ik, ins1, itnflg, 
	    ivamax, iws, iiws, iz, next1, next2, npts, numpt1, jam, jap, 
	    jtused, ifrl, n, m, mdic, jbr, jckr, jcpr, jcr, jdr, jgr, jmin, 
	    jminr, jpr, jpxr, jtr, jcnt1, jcnt2, jcnt3, jsw, jtkf, lisv, lsv, 
	    ipt, jfind, ic, icc, il, k, numpts, iamdct, ifl2, j5, j6, jw6, 
	    j10, j12, j13, j40, j43, j54, j103;

--offset 10464 /4=2616 /8=1308

//is - index of surface int values (into canon ?)
//iis - index of surface, float values
//ips,iips,ids,iids, etc- index for part surface, drive surface, etc. 
//iautps - auto ps flag 
//icut - tool axis output to cl file flag
//igtflg - usable go flag for restart mode
//icrdct - number of cells to store the sequence field
//icdefl - cutter defined flag
//isrch - search mode flag - 0=normal,1=tranto,2=restart
//jminr - flag to tell minimum distance routine to return rather than call aerr
//multax - multiple axis flag
//numax - number of axis
//numpts - number of points per elementary cut sequence
//numsfs - maximum number of surfaces allowed
//icscnt - quantity of check surfaces in memory
//lisv, lsv - basic length of the two surface blocks


--offset 10464 /4=2616 /8=1308
    doublereal probuf[100], 

--offset 11264 /4=2816 /8=1408
	cansto[2000];
    integer ier, instr1, instr2, nwds, icl, nrec, irecno, itrflg, nw, idummy;

//canon storage for ps,ds,cs
//		in the format:
//		cell 1: surface type
//		cell 2: number of words following for this entry
//		cell 3: name
//		cell 4: subscript
//		cell 5,etc: canon values


//ier- error flag
//instr1,instr2 - protap code and subcode
//nwds - number of words in protap entry
//icl - 
//nrec - number of records 
//irec - 



} a2cmmn_;



***********************************************************
ERROR NUMBERS:

	1 - 
	4 - bad number format
	5 - statement did not start with a variable name or vocabulary word
	7 - improper punctuation
	9 - no closing parenthesis
	10 - no opening parenthesis
	11 - illegal punctuation terminating statement
	14 - more than 5000 scalar definitions in program
	15 - out of space in vst?
	16 - FINI read while defining a macro
	22 - illegal debug format
	23 - fini with an illegal format
	40 - vst table size exceeded
	56 - more consecutive exponentiation operations than permitted
	63 - attempted division by zero
	65 - improper number of arguments for arithmetic function
	68 - negative value raised to a non-integral power
	79 - parameter should have been a surface
	83 - value must be a scalar
	84 - parameter string too long
	101 - undefined symbol
	105 - no subscript value given for subscripted variable
	106 - attempting to define surface in a scalar array
	108 - subscripted variable has not appeared in a RESERV statement
	129 - not enough parameters
	131 - illegal format - punctuation found
	132 - invalid parameter
	133 - improper vocabulary code
	139 - variable ill-defined
	152 - variable does not define a surface
	153 - word following OBTAIN must be a surface type
	154 - parameters exceed length of canonical form
	155 - format error; no slash found
	157 - attempt to incorrectly use a large surface
	201 - attempt to define a macro inside a loop
	203 - must be an = sign after macro name
	204 - macro name must be a variable symbol
	205 - macro call exceeds limit of 50 variables
	207 - bad symbol in macro def
	210 - LOOPST or LOOPND in macro definition
	226 - incorrect format for macro call
	227 - ?
	233 - incorrect macro name
	252 - RESERV not allowed in loop or macro
	311 - cutter not defined
	402 - parameter within "if" parenthesis not a scalar
	406 - id not present in loop or macro
	407 - JUMPTO not within loop or macro
	505 - value of tool direction and fwd is greater than or equal to 88 deg.
	840 - error in file search, large surface file
	841 - error in file search, pattern file
	1000 - method of definition unknown
	1002 - redefinition of entity
	1005 - calculation failed in defining entity
	6134- 

***********************************************************
cl records

1000 - original input sequence number
2000 - auxilary commands
3000 - surface data
4000
5000 - cutter locations
6000 - intol, outtol, cutter
7000
8000
9000
10000
11000
12000
13000
14000 - fini

1000 - original input sequence number
	hdr2 - seq. number
	text of column 72?-80 (card id)
	
2000 - auxilary commands:

*posta:*(no parameters)
1 END
2 STOP
3 OPSTOP
4 ISTOP
5 RAPID
6 SWITCH
7 RETRCT
8 DRESS
9 PICKUP
10 UNLOAD
11 PENUP
12 PENDWN
13 ZERO
14 GOHOME
15 RESET
16 GOCLER
17 DRAWLI
18 PROBY
19 PROBX
20 ULOCKX
21 LOCKX
22 FACEML  


*postp1_:*(with parameters)
1001 PLUNGE
1002 HEAD    
1003 MODE    
1004 CLEARP  
1005 TMARK   
1006 REWIND  
1007 CUTCOM  
1008 REVERS  
1009 FEDRAT  
1010 DELAY   
1011 AIR     
1012 DELETE  
1013 LEADER  
1014 PPLOT   
1015 MACHIN
1016 MCHTOL  
1017 PIVOTZ  
1018 MCHFIN  
1019 SEQNO   
1020 INTCOD  
1021 DISPLY  
1022 AUXFUN  
1023 CHECK   
1024 POSTN   
1025 TOOLNO  
1026 ROTABL  
1027 ORIGIN
1028 SAFETY  
1029 ARCSLP  
1030 COOLNT  
1031 SPINDL  
1032 IFRO    
1033 TURRET        
1034 <not used>
1035 ROTHED  
1036 THREAD 
1037 TRANS   
1038 TRACUT  
1039 INDEX   
1040 COPY    
1041 PLOT    
1042 OVPLOT  
1043 LETTER 
1044 PPRINT  
1045 PARTNO
1046 INSERT  
1047 CAMERA  
1048 PREFUN  
1049 COUPLE  
1050 PITCH   
1051 MDWRIT
1052 MDEND   
1053 ASLOPE  
1054 CYCLE   
1055 LOADTL  
1056 SELCTL  
1057 CLRSRF  
1058 DWELL   
1059 DRAFT   
1060 CLAMP   
1061 PLABEL  
1062 MAXDPM  
1063 SLOWDN  
1064 MAXVEL  
1065 LPRINT  
1066 MOVETO  
1067 CORNFD  
1068 PBS     
1069 REGBRK
1070 VTLAXS  
1071 WCORN   
1072 MAGTAP 


5000 - cutter locations

hdr2:
3 initial start move
5 first 242 double words of cldata
6 next 242 double words of cldata



***********************************************************

File description:


A2CTRL - section 2 - calculate cut vectors from motion commands
ABKKPR - 2d "bookkeeper"
ACCINT - 2d routines used by AINT to find entity intersections
ACENTR  -  3d TO ITERATE THE CUTTER INTO A POSITION WITHIN THE SPECIFIED TOLERANCE OF TWO OR THREE SURFACES.
			calls ACNTR2 - a continuation	
ACHECK - 3d calls ACPLAN- determine check surface position?
ACNTRL - section 0 - overall section control 
ACPLAN - check surface plane 
ACSCF - 2d  CS  canonical form - determine canon values , circle or line
ADDST - directed distance; intersection given a point and vector direction; DDPLAN, DDCYLN, DDQUAD, DDCONE, DDSPHR
ADDSTR - same as above; ruled surfaces
ADDTB - directed distance, tabcyl
ADELTA - 3d step vector calc for calculating if the cut vector satisfies INTOL/OUTOL
ADIAGP - diagnostic print
ADSCF - 2d  DS  canonical form - determine canon values , circle or line
ADYNDP-assembler; calls BDYNDP debugging dump?
AGTARG - get arguments from expressions
AGTSUB - get subscript value
AJUNDD - unit normal directed distance-  
AMD2	- minimum distance 2 - called from AMIND
AMIND -  3d minimum distance to a surface
AMON2 - statement id's in macros and loops
AMON4 - macro and loop storage
AMON6 - macro definitions
AMON7 - macro call
AMONTR - moniter -main control for section one, pass one. create ptpp metalanguage for pass two, check for errors
ANORM - normalize a given vector
ANRMAL - determine the normal to a surface at any point I believe it sets SN based on SP (surface point)
AOFSET - OFFSET statement
AORDP	2d order points in direction of travel
APLANE - 3d references TLON, TANTO, etc.
APLNEX - TO CALCULATE A VECTOR, CMOVE, WHICH, IF APPLIED AT TE POSITION,
				WILL MOVE THE CUTTER TO SIMULTANEOUS CONTACT WITH THREE PLANES.
				RETURN VARIALBE    JPXR = 0  CMOVE CALCULATION OK
				JPXR = 1  UNABLE TO CALCULATE CMOVE
				I think this just solves the move to the tangent planes for each 
				iteration of the tool to surface routine.  The planes are determined 
				from tangent planes of the surfaces from the common normals
APTPOS - section 4 - post process	
APTLOD - load aptpp record with individual ptpp entries prior to making an entry in the ptpp area (vst)
APTPUT - load the ptpp(vst). Write to disk if full
ARADAR - "radar" ie, scan the area for surfaces?
ARLM2  2d ARELEM (arithmetic element) 
ARLM3  3d ARELEM 
ASCLPT - place scalar value in canon
ASCNTL - section 1  language, parse, store canon forms
ASEC2    setup, call various sec 2 routines
ASEC2A    FROM/GO/TO statemments? 
ASEC2B    calls ARPDIS dispatch to  ARELEM3 or ARELEM2
ASEC2C    calls (same as above)
ASEC2D
ASEGMT 	2d "SEGMENTS A CIRCULAR DRIVE SURFACE
			GENERAL CALCULATION PROCEESS IS AS FOLLOWS...
			INITIALLY, SET UP SOME VALUES TO BE USED LATER
			RBIG IS LARGE RADIUS RSMAL IS SMALL RADIUS OF TOLERANCE BAND
			RTE IS VECTOR FROM CENTER OF CIRCLE TO TE POSITION
			F   RFP IS VECTOR FROM CENTER TO FINAL POINT FPNT
			SET UP SENSE = + OR - 1. FOR CLOCKWISE OR COUNTERCLOCKWISE
			MOTION REQUIRED.      THEN COMPUTE THE ANGULAR DIFFERENCE
			BETWEEN THE POINTS  DELTAN
			WHICH HAS BEEN CORRECTED FOR MULTIPLE REVOLUTIONS
			ALSO COMPUTE THE MAXIMUM ALLOWABLE ANCLE  DECIDE WOW MANY
			STEPS ARE REQUIRED, AND SEGMENT
			DO NOT OUPUT THE LAST POINT, AS THAT IS DONE BY ARLMI"
ASELP	2d select final point based on TO, ON, PAST, TANTO
ASETUP -  SETS SPECIAL ITERATION FLAGS FOR  MINIMUM DISTANCE AND SETS NUMDIM
ASQILT - squeeze the elment table - for nested expressions
ASTSEL - select 2d or 3d type calc
ASTOR -  stores specified point (and toolaxis if multiax) in TCDAT writes overflow to tape
ASTUF - small routine to ?
ASTRUP - called by ARPDIS; start up movement command
ATAPE - write data to tape
ATLNRM -  3d tool normal ? only calls vector subroutines
ATLTST - tolerance test
ATINKR - multi axis processing
AZCOR   2d z correction - "CORRECTS COMPUTED CUTTER LOCATION FOR Z VALUE
		     MORE ACCURATELY8 MOVES CUTTER UP OR DOWN ALONG ITS AXIS
		      UNTIL THE CUTTER END POINT IS IN A PLANE PARALLEL TO
		      THE PART SURVACE PLANE, AND WHICH PLANE ALSO CONTAINS THE
		      ORIGINAL CUTTER END POINT TE , WHERE THE CUTTER WAS AT THE
		     START OF I-D PROCESSING"

BDYNDP - 
CHKRET - tabcyl interval screening	
SECTN2 - section 2 - just prints a warning statement
SECTN3 - section 3 - COPY and TRACUT transforms
CMLOAD - not implemented; for plotting
CAMRAV - not implemented; for plotting
FRAMEV-not implemented; for plotting
DXDYV - not implemented; for plotting
GRID1V -not implemented; for plotting
XSCALV - not implemented; for plotting
YSCALV -not implemented; for plotting
ARROW -not implemented; for plotting
SETUPP - set up plotting
LINEV - not implemented; for plotting
PL3AXS -
PRINTV - not implemented; for plotting
TRUNC - truncate a line at plotting edges
PERSPC - plotting ; not implemented

************************************************************************************

Keywords:

TITLES  1-fixed field;1,0,0
REMARK  1-fixed field;2,0,0
PPRINT  1-fixed field;3,1044,2000
PARTNO  1-fixed field;4,1045,2000
INSERT  1-fixed field;5,1046,2000
    AT  29,175,0,175
    GO  26- tool motion; 7,1,7000
    IF  9- if statement; ,1,0,0
    IN  29,48,0,48
    ON  29,71,0,71
    TO  29,69,0,69
    UP  29,112,0,112
   AIR  22-post processor; 11,1011,2000
   ALL  29,51,0,51
   ARC  29,87,0,87
   BCD  29,165,0,165
   CAM  29,169,0,169
   CLW  29,60,0,60
   CUT  3,1,1,6000
   DAC  25,6,0,0
   END  23- post processor, no parameters; 1,1,2000
   FAN  29,184,0,184
   IPM  29,73,0,73
   IPR  29,74,0,74
   LOW  29,63,0,63
   LTV  33,2,0,0
   MED  29,136,0,136
   MIT  33,3,0,0
   NOW  29,161,0,161
   NOX  29,14,0,14
   NOY  29,15,0,15
   NOZ  29,16,0,16
   OFF  29,72,0,72
   OUT  29,49,0,49
   PBS  22-post processor; 60,1068,2000
   PEN  29,128,0,128
   RED  29,131,0,131
   REV  29,97,0,97
   RPM  29,78,0,78
   SFM  29,115,0,115
   SYN  17- synonym; ,1,0,0
   TAP  29,168,0,168
   TPI  29,143,0,143
   XYZ  29,108,0,108
   5PT  29,45,0,45
  ABSF  19- arithmetic func; 9,9,8
  AUTO  29,88,0,88
  BLUE  29,133,0,133
  BORE  29,82,0,82
  BOTH  29,83,0,83
  CALL  7 -call statement,1,0,0
  CCLW  29,59,0,59
  CLTV  25,5,0,0
  CMIT  33,4,0,0
  CONE  24- entity definition; 8,10,8
  COPY  21,3,1040,2000
  COSF  19- arithmetic func; 5,5,8
  DARK  29,137,0,137
  DASH  29,124,0,124
  DECR  29,65,0,65
  DEEP  29,153,0,153
  DOTF  19- arithmetic func; 1,1,8
  DOWN  29,113,0,113
  EXPF  19- arithmetic func; 6,6,8
  FACE  29,81,0,81
  FINI  18 -fini; ,1,0,14000
  FROM  26- tool motion; 11,3,5000
  FULL  29,147,0,147
  GOTO  26- tool motion; 13,5,5000
  GOUP  26- tool motion; 5,5,8000
  GRID  29,176,0,176
  HEAD  22-post processor; 2,1002,2000
  HIGH  29,62,0,62
  IFRO  22-post processor; 31,1032,2000
  INCR  29,66,0,66
  LAST  29,52,0,52
  LEFT  29,8,0,8
  LINE  24- entity definition; 2,7,2
  LITE  29,135,0,135
  LOCK  29,114,0,114
  LOFT  24- entity definition; 16,11,16
  LOGF  19- arithmetic func; 7,7,8
  MAIN  29,93,0,93
  MESH  24- entity definition; 19,0,51
  MILL  29,151,0,151
  MIST  29,90,0,90
  MODE  22-post processor; 3,1003,2000
  NEGX  29,11,0,11
  NEGY  29,12,0,12
  NEGZ  29,13,0,13
  NEXT  29,162,0,162
  NOPS  3,7,6,9000
  NUMF  19- arithmetic func; 11,11,8
  OMIT  29,172,0,172
  OPEN  29,50,0,50
  PART  29,166,0,166
  PAST  29,70,0,70
  PLOT  22-post processor; 39,1041,2000
  PLUS  29,19,0,19
  POSX  29,20,0,20
  POSY  29,21,0,21
  POSZ  29,22,0,22
  PSIS  13,1,4,3000
  RAIL  29,93,0,93
  READ  4,1,0,0
  REAM  29,167,0,167
  REAR  29,149,0,149
  SAME  29,54,0,54
  SEC1  31,1,0,0
  SEC2  31,2,0,0
  SIDE  29,94,0,94
  SINF  19- arithmetic func; 4,4,8
  STEP  29,92,0,92
  STOP  23- post processor, no parameters; 2,2,2000
  TANF  19- arithmetic func; 13,13,8
  THRU  29,152,0,152
  TLON  27- tool positioning; 3,3,4000
  TOOL  24- entity definition; 17,3,17
  TRAV  29,154,0,154
  TURN  29,80,0,80
  TYPE  29,98,0,98
  UNIT  29,30,0,30
  ZERO  23- post processor, no parameters; 13,13,2000
 AAXIS  29,140,0,140
 ANGLF  19- arithmetic func; 10,10,8
 ATANF  19- arithmetic func; 8,8,8
 AVOID  29,173,0,173
 BAXIS  29,141,0,141
 BLACK  29,130,0,130
 CANON  28,1,0,3099
 CAXIS  29,142,0,142
 CHECK  22-post processor; 22,1023,2000
 CHUCK  29,138,0,138
 CLAMP  22-post processor; 52,1060,2000
 CONST  29,64,0,64
 CROSS  29,3,0,3
 CYCLE  22-post processor; 46,1054,2000
 DEBUG  15,1,0,0
 DELAY  22-post processor; 10,1010,2000
 DISTF  19- arithmetic func; 15,15,8
 DITTO  29,127,0,127
 DMILL  3,10,11,6000
 DRAFT  22-post processor; 51,1059,2000
 DRESS  23- post processor, no parameters; 8,8,2000
 DRILL  29,163,0,163
 DSTAN  29,27,0,27
 DWELL  22-post processor; 50,1058,2000
 FLOOD  29,89,0,89
 FRONT  29,148,0,148
 GOFWD  26- tool motion; 3,3,8000
 GOLFT  26- tool motion; 1,1,8000
 GORGT  26- tool motion; 2,2,8000
 GREEN  29,132,0,132
 INDEX  21,2,1039,2000
 INTOF  29,5,0,5
 INTOL  2- tool path control; 4,4,6000
 ISTOP  23- post processor, no parameters; 4,4,2000
 LARGE  29,7,0,7
 LIBRY  35,1,0,0
 LIGHT  29,100,0,100
 LNTHF  19- arithmetic func; 2,2,8
 LOCKX  23- post processor, no parameters; 21,21,2000
 MACRO  14 -macro statements; ,1,0,0
 MAXDP  2- tool path control; 3,3,9000
 MDEND  22-post processor; 44,1052,2000
 MINUS  29,10,0,10
 NIXIE  29,99,0,99
 PARAB  29,77,0,77
 PENUP  23- post processor, no parameters; 11,11,2000
 PERSP  29,67,0,67
 PITCH  22-post processor; 64,1050,2000
 PLANE  24- entity definition; 3,7,3
 POINT  24- entity definition; 1,6,1
 POSTN  22-post processor; 23,1024,2000
 PPLOT  22-post processor; 14,1014,2000
 PRINT  4,3,3,0
 PROBX  23- post processor, no parameters; 19,19,2000
 PROBY  23- post processor, no parameters; 18,18,2000
 PSTAN  29,146,0,146
 PUNCH  4,2,0,0
 RANGE  29,145,0,145
 RAPID  23- post processor, no parameters; 5,5,2000
 RESET  23- post processor, no parameters; 15,15,2000
 RIGHT  29,24,0,24
 SCALE  29,25,0,25
 SEQNO  22-post processor; 18,1019,2000
 SLOPE  29,47,0,47
 SMALL  29,26,0,26
 SOLID  29,123,0,123
 SQRTF  19- arithmetic func; 3,3,8
 START  29,57,0,57
 TANDS  29,183,0,183
 TANON  29,109,0,109
 TANTO  29,27,0,27
 THICK  2- tool path control; 5,5,9000
 TIMES  29,28,0,28
 TLLFT  27- tool positioning; 1,1,4000
 TLRGT  27- tool positioning; 2,2,4000
 TMARK  22-post processor; 5,1005,2000
 TOLER  2- tool path control; 2,2,6000
 TRANS  22-post processor; 35,1037,2000
 TWOPT  29,102,0,102
 WCORN  22-post processor; 63,1071,2000
 XAXIS  29,84,0,84
 XYROT  29,34,0,34
 YAXIS  29,85,0,85
 YZROT  29,38,0,38
 ZAXIS  29,86,0,86
 ZSURF  6,1,0,0
 ZXROT  29,42,0,42
ADJUST  29,159,0,159
ANTSPI  29,176,0,176
ARCSLP  22-post processor; 28,1029,2000
ASLOPE  22-post processor; 45,1053,2000
ATANGL  29,1,0,1
ATAN2F  19- arithmetic func; 14,14
AUTOPS  3,5,7,9000
AUXFUN  22-post processor; 21,1022,2000
BEVELS  3,10,2,6000
BINARY  29,164,0,164
CAMERA  22-post processor; 36,1047,2000
CENTER  29,2,0,2
CIRCLE  24- entity definition; 4,10,4
CIRCUL  29,75,0,75
CIRLIN  29,126,0,126
CLEARP  22-post processor; 4,1004,2000
CLPRNT  25,1,0,0
CLRSRF  22-post processor; 49,1057,2000
COLLET  29,139,0,139
CONSEC  24- entity definition; 20,0,52
COOLNT  22-post processor; 29,1030,2000
CORNFD  22-post processor; 59,1067,2000
COUPLE  22-post processor; 38,1049,2000
CUTANG  29,160,0,160
CUTCOM  22-post processor; 7,1007,2000
CUTTER  2- tool path control; 6,6,6000
CYLNDR  24- entity definition; 5,10,5
DELETE  22-post processor; 12,1012,2000
DISPLY  22-post processor; 20,1021,2000
DNTCUT  3,2,1,6000
DOTTED  29,125,0,125
DRAWLI  23- post processor, no parameters; 17,17,2000
DYNDMP  15,2,9,6000
ELLIPS  24- entity definition; 6,13,6
ELMSRF  24- entity definition; 22,0,54
ENDARC  29,58,0,58
FACEML  23- post processor, no parameters; 22,22,2000
FEDRAT  22-post processor; 9,1009,2000
FOURPT  29,101,0,101
FUNOFY  29,4,0,4
GAPLES  29,180,0,180
GCONIC  24- entity definition; 9,13,9
GOBACK  26- tool motion; 4,4,8000
GOCLER  23- post processor, no parameters; 16,16,2000
GODLTA  26- tool motion; 12,4,5000
GODOWN  26- tool motion; 6,6,8000
GOHOME  23- post processor, no parameters; 14,14,2000
GOUGCK  3,4,8,9000
HOLDER  29,157,0,157
HYPERB  24- entity definition; 7,13,7
INDIRP  26- tool motion; 9,1,5000
INDIRV  26- tool motion; 10,2,5000
INSERT  1,5,1046,2000
INTCOD  22-post processor; 19,1020,2000
INTENS  29,134,0,134
INTERC  29,46,0,46
INVERS  29,6,0,6
JUMPTO  10- jumpto statement;,1,0,0
LCONIC  24- entity definition; 10,13,10
LEADER  22-post processor; 13,1013,2000
LENGTH  29,9,0,9
LETTER  22-post processor; 41,1043,2000
LINCIR  29,95,0,95
LINEAR  29,76,0,76
LOADTL  22-post processor; 47,1055,2000
LOG10F  19- arithmetic func; 12,12,8
LOOPND  11,2,0,0
LOOPST  11,1,0,0
LPRINT  22-post processor; 57,1065,2000
MACHIN  21,4,1015,2000
MAGTAP  22-post processor; 64,1072,2000
MANUAL  29,158,0,158
MATRIX  24- entity definition; 12,15,12
MAXDPM  22-post processor; 54,1062,2000
MAXIPM  29,96,0,96
MAXRPM  29,79,0,79
MAXVEL  22-post processor; 56,1064,2000
MCHFIN  22-post processor; 17,1018,2000
MCHTOL  22-post processor; 15,1016,2000
MDWRIT  22-post processor; 43,1051,2000
MEDIUM  29,61,0,61
MIRROR  29,56,0,56
MODIFY  29,55,0,55
MOVETO  22-post processor; 58,1066,2000
MULTAX  3,3,2,9000
MULTRD  29,119,0,119
NDTEST  3,6,2,6000
NOMORE  29,53,0,53
NOPLOT  25,2,0,0
NOPOST  25,3,0,0
NORMAL  29,111,0,111
NORMDS  29,182,0,87
NORMPS  29,181,32767,4000
NUMPTS  2- tool path control; 7,4,9000
OBTAIN  5,1,0,0
OFFSET  26- tool motion; 8,2,7000
OPSKIP  22-post processor; 42,1012,2000
OPSTOP  23- post processor, no parameters; 3,3,2000
OPTION  29,144,0,144
ORIGIN  22-post processor; 26,1027,2000
OUTTOL  2- tool path control; 8,5,6000
OVPLOT  22-post processor; 40,1042,2000
PARLEL  29,17,0,17
PATERN  24- entity definition; 22,0,18
PENDWN  23- post processor, no parameters; 12,12,2000
PERPTO  29,18,0,18
PICKUP  23- post processor, no parameters; 9,9,2000
PIVOTZ  22-post processor; 16,1017,2000
PLABEL  22-post processor; 53,1061,2000
PLUNGE  22-post processor; 1,1001,2000
POCKET  12,1,1,11000
POLCON  24- entity definition; 15,82,15
PREFUN  22-post processor; 37,1048,2000
PTNORM  29,104,0,104
PTONLY  25,4,0,0
PTSLOP  29,103,0,103
QADRIC  24- entity definition; 14,13,14
RADIUS  29,23,0,23
RANDOM  29,174,0,174
REFSYS  8,1,0,0
REGBRK  22-post processor; 61,1069,2000
RESERV  16,1,0,0
RETAIN  29,171,0,171
RETRCT  23- post processor, no parameters; 7,7,2000
REVERS  22-post processor; 8,1008,2000
REWIND  22-post processor; 6,1006,2000
RLDSRF  24- entity definition; 21,0,53
ROTABL  22-post processor; 25,1026,2000
ROTHED  22-post processor; 33,1035,2000
ROTREF  29,68,0,68
RTHETA  29,106,0,106
SADDLE  29,150,0,150
SAFETY  22-post processor; 27,1028,2000
SCRIBE  29,129,0,129
SELCTL  22-post processor; 48,1056,2000
SETANG  29,156,0,156
SETOOL  29,155,0,155
SLOWDN  22-post processor; 55,1063,2000
SPHERE  24- entity definition; 13,7,13
SPINDL  22-post processor; 30,1031,2000
SPLINE  29,105,0,105
SRFVCT  26- tool motion; 14,8,5000
SWITCH  23- post processor, no parameters; 6,6,2000
TABCYL  24- entity definition; 18,0,50
TANCRV  33,5,0,0
TAPKUL  29,91,0,91
TERMAC  14- macro statements;,2,0,0
THETAR  29,107,0,107
THREAD  22-post processor; 34,1036,2000
TLAXIS  2- tool path control; 1,1,9000
TLNDON  27- tool positioning; 7,3,4000
TLOFPS  27- tool positioning; 6,6,4000
TLONPS  27- tool positioning; 5,5,4000
TOOLNO  22-post processor; 24,1025,2000
TRACUT  21,1,1038,2000
TRANSL  29,29,0,29
TRANTO  20,1,7,6000
TRFORM  29,110,0,110
TUNEUP  34,1,0,0
TURRET  22-post processor; 32,1033,2000
ULOCKX  23- post processor, no parameters; 20,20,2000
UNLOAD  23- post processor, no parameters; 10,10,2000
VECTOR  24- entity definition; 11,6,11
VTLAXS  22-post processor; 62,1070,2000
XCOORD  29,116,0,116
XLARGE  29,31,0,31
XSMALL  29,32,0,32
XYPLAN  29,33,0,33
XYVIEW  29,120,0,120
YCOORD  29,117,0,117
YLARGE  29,35,0,35
YSMALL  29,36,0,36
YZPLAN  29,37,0,37
YZVIEW  29,121,0,121
ZCOORD  29,118,0,118
ZIGZAG  29,170,0,170
ZLARGE  29,39,0,39
ZSMALL  29,40,0,40
ZXPLAN  29,41,0,41
ZXVIEW  29,122,0,122
2DCALC  3,8,2,6000
3DCALC  3,9,2,6000
3PT2SL  29,43,0,43
4PT1SL  29,44,0,44










void ataprd_(doublereal* tapeType, integer* ioflag, integer* nwrds, integer* param1, 
    	integer* irecn, integer* param2, integer* hdr1, integer* param3, 
    	integer* hdr2, integer* param4, integer* startAddress, integer* param5, 
    	integer* param6, integer* param7, integer* deftab)




ataprd_(&ataptb_1.protap, &ioflag, &nwrds, &c__2, ifw, &c__3, avst_1.vst, 
    	    &c__0);


tapewt_(nucltp, &a3fxi1_.iretvr, &a0con_1.k4, &a3fxi1_.nurcno, &
    	    a0con_1.k1, &a3fxi1_.instr1, &a0con_1.k1, &a3fxi1_.instr2, &
    	    a0con_1.k1, a3fxd1_.tapsto, &a3fxi1_.numwds);


int atapwt_(doublereal* tapeType, integer* ioflag, integer* param1, integer* irecn,
	integer* param2, integer* hdr1, integer* param3, integer* hdr2,
	integer* param4, integer* startAddress, integer* lengthOfRecord, integer* tcdat, integer* nw,
	integer* deftab)

