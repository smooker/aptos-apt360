       SUBROUTINE ACLS12
C     *** THIS PROGRAM LAST MODIFIED FOR VERSION 4, MODIFICATION 3 ***
C...
C..   THIS PASS TWO SUBROUTINE PROCESSES A CLASS 12 PTPP RECORD.
C..    ( ARITHMETIC OPERATIONS AND ARITHMETIC FUNCTION STATEMENTS)
C********        *******       ****MB****             *******SJD***
C
       IMPLICIT REAL*8(A-H,O-Z)
      INTEGER*2 JOPSTO(4),LST,NARG,KDFANS(20)
      INTEGER*4 PUNTAP,ISCALR(60)
      COMMON/A1PAS2/I,J,K,L,MOVLGE,KANMAX,ICANST,IOVREC,KANPTR,MDFTAB,
     1KANCNT,KAUX,KDFCNT,IDEFP,KPRCNT,MDFPRE,IPREP,KOVFLP,KSRFCT,KOVCNT,
     2LSCAN,IOVFLO,MAXCAN,IREF,ICANSC,NAMSTA,KANGO,LASPTP,ISUB,
     3LCOMP,LGEREC,IRECN,JREC,JNUM,KANCUR,KANCOT,KDFENT,KANPAR,LGELOC,
     4IDTMOV,ISPPRG,INDEXS,KPTP,KPTPCT,KLASTP,KLASCT,KPRNT
      COMMON/ATAPTB/PROTAP,CANTAP,CLTAPE,POCTAP,PLOTAP,SRFTAP,TAPES1,
     1TAPES2,TAPES3,TAPES4,INTAPE,IOUTAP,PUNTAP
      COMMON/A1COM/REFSYS,NAME,NAME1,JSUBER,JSV,NAMSUB,KDBUG,INDXPT,
     1LOOP,IFINI
      COMMON/A2CLS7/PPSEQ1,PPSEQ2,ENAME,EINAME,IEREC,ISN
      COMMON/AVST/VST(7200)
      COMMON/ASCALR/SCALR(180),ISCWS,NSURF,LOCTEM,IARGTP
      COMMON/ADFSTO/DEFSTO(85),PARTNO(11)
      DIMENSION DEFANS(82)
       DIMENSION STORE(10),IOPRND(170),OPRAND(40),KFNUM(2),DEFTAB(1000)
      DIMENSION PTPP(7200),IPTPP(14400),CANON(7200),KSTO(20)
      EQUIVALENCE (SCALR(1),ISCALR(1)),(VST(7200),DEFTAB(1000))
       EQUIVALENCE (KFNUM(1),FNUM,KSTYPE),(KFNUM(2),KRESLT)
      EQUIVALENCE (VST(1),PTPP(1),CANON(1),IPTPP(1))
      EQUIVALENCE (DEFSTO(4),KDFANS(1),DEFANS(1))
      EQUIVALENCE (DEFSTO(1),IOPRND(1)),(DEFTAB(1),STORE(1),KSTO(1))
      EQUIVALENCE (DEFTAB(11),OPRAND(1)),(DEFTAB(41),JOPSTO(1))
C
C...     INITIALIZE STORAGE FOR SUMMATION OF TERMS TO ZERO
       OPRAND(1) = 0.0
C...     SET UP ADDITION OPERATOR FOR SUMMATION OF FIRST TERM
       JOPSTO(4) = 1
C...     INITIALIZE OPERATOR-OPERAND COUNT TO ZERO
       IOPNO = 0
C... GET STORING INDEX TO SCALR TABLE FOR FINAL RESULTS
      IPT = 2*INDXPT - 1
      ISTORE = IPTPP(IPT)
C... INCREMENT PTPP PICK-UP INDEX TO LOC. OF FIRST PARAMETER
      INDXPT = INDXPT + 1
C.. FIRST SET LOCATION OF LAST 8-BYTE ENTRY FOR THIS PTPP RECORD
      IPTLIM = IPTPP(IPT-1) +(INDXPT-2)
C... FIRST ENTRY IS EXPECTED TO BE A SCALAR OR VOC. WORD ONLY
C...     IF DEBUG OUTPUT DESIRED, PRINT PTPP RECORD
            IF(KDBUG.EQ.0) GO TO 110
      NT = IPT-2
       NT = NT
      ISND = 2*IPTLIM
      WRITE(IOUTAP,1) (IPTPP(I),I=NT,ISND)
    1 FORMAT (1H ,30I4)
       GO TO 110
C...
C...         ***                ****               ****         ****
C...
C...   EXPECTING AN ARITHMETIC OPERATOR
C...
  100 FNUM = PTPP(INDXPT)
C....
C... INCREMENT PTPP PICK-UP  INDEX TO NEXT ENTRY
      INDXPT = INDXPT + 1
C...  ILLEGAL IF NOT PUNCTUATION PTPP CODE
      IF ( KSTYPE.NE.8 ) GO TO 900
C...
C...     CHECK IT FOR VALID RANGE
            IF(KRESLT.LE.0) GO TO 900
            IF(KRESLT.GT.5) GO TO 900
C
C...     SAVE OPERATOR IN LAST WORD OF OPERATION STACK FOR LATER TESTS
       JOPSTO(4) = KRESLT
C
CC.
C..
C...         ***                ****               ****         ****
C...     TEST FOR END OF EXPRESSION - ILLEGAL AT THIS POINT -
C...     OPERATOR LEFT DANGLING
  110 IF (INDXPT .GT. IPTLIM) GO TO 910
C..  GET THE  EXPECTED  O P E R A N D
      CALL AGTARG(FNUM,1,JPT)
      IF(JSUBER.NE.0) GO TO 1000
C...
C...     TEST FOR VOCABULARY WORD OR SCALAR - ONLY USABLE ENTRIES
      GO TO (120,970,910,970,500,985,1000),JPT
C..
C...         ***                ****               ****         ****
C..
C
C...     INCREMENT OPERATOR COUNT
  120  IOPNO = IOPNO + 1
C..
C...     TEST FOR FOUR OR MORE OPERATIONS IN HOLD
  125       IF(IOPNO.LT.4) GO TO 200
C
C...     FOUR OR MORE OPERATIONS IN HOLD - EXPONENTIATION SERIES -
C...     IF LAST OPERATOR EXPON., SAVE ITS OPERAND UNTIL NON-EXPON.
C...     OPERATOR FOUND - OTHERWISE EVALUATE LATEST EXPONENTIATION
  140       IF(JOPSTO(4).NE.5) GO TO 150
C...     OPERATOR IS EXPON. - MAKE SURE THERE IS ROOM FOR THIS
C...     OPERAND IN STACK
            IF(IOPNO-39)  350, 350, 930
C
C...     LAST OPERATOR NOT EXPON. - START EVALUATING SAVED EXPONENT-
C...     IATION SEQUENCE
C
C...     DETERMINE WHETHER OR NOT EXPONENT IS AN INTEGER
  150  TEMP = OPRAND(IOPNO)
            IF(DABS(IDINT(TEMP)-TEMP)-1.E-6.GT.0.0) GO TO 160
C
C...     YES, IT IS
       JTEMP1 = OPRAND(IOPNO)
       OPRAND(IOPNO-1) = OPRAND(IOPNO-1)**JTEMP1
       GO TO 170
C
C...     EXPONENT IS NOT AN INTEGER - IF VALUE TO BE EXPONENTIATED
C...     IS NEGATIVE, ERROR
  160       IF(OPRAND(IOPNO-1).LT.0.0) GO TO 180
C...     VALUE TO BE RAISED TO A POWER IS POSITIVE - EXPONENTIATE
       OPRAND(IOPNO-1) = OPRAND(IOPNO-1)**OPRAND(IOPNO)
C
C...     DECREMENT OPERATOR COUNT, AND GO TO TEST FOR REDUCTION
C...     OF STACK TO ACCEPTABLE LEVEL
  170  IOPNO = IOPNO - 1
       GO TO 125
C
C...     NEGATIVE VALUE TO BE RAISED TO A NON-INTEGRAL POWER - ERROR
  180  JSUBER = 68
       GO TO 1000
C
C...     ADD NEWEST OPERATOR TO STACK USING COUNT OF
C...     OPERATORS AS AN INDEX
  200  JOPSTO(IOPNO) = JOPSTO(4)
C...     LESS THAN FOUR OPERATIONS IN HOLD - BRANCH TO SPECIFIC
C...     PROCESSING DEPENDING UPON NUMBER OF OPERATIONS
            IF(IOPNO-2)  350, 300, 210
C
C...     THREE OPERATIONS IN HOLD - IF LATEST IS EXPONENTIATION, SAVE
C...     ITS OPERAND UNTIL NON-EXPONENTIATION OPERATOR FOUND
  210       IF(JOPSTO(4).EQ.5) GO TO 350
C
C...     LATEST NOT EXPONENTIATION - PERFORM PREVIOUS
C...     OPERATION (MULTIPLY, DIVIDE, OR EXPONENTIATE)
  220       IF(JOPSTO(2)-4)  230, 240, 250
C
C...     DIVIDE FIRST OPERAND BY SECOND
C...     MAKE SURE DIVISOR IS NOT ZERO - IF SO, ERROR
  230       IF(OPRAND(3).EQ.0) GO TO 940
       OPRAND(2) = OPRAND(2)/OPRAND(3)
       GO TO 270
C
C...     MULTIPLY FIRST OPERAND BY SECOND
  240  OPRAND(2) = OPRAND(2)*OPRAND(3)
       GO TO 270
C
C...     RAISE FIRST OPERAND TO POWER INDICATED BY SECOND OPERAND
C...     DETERMINE WHETHER OR NOT EXPONENT IS AN INTEGER
  250  TEMP = OPRAND(3)
            IF(DABS(IDINT(TEMP)-TEMP)-1.E-6.GT.0.0) GO TO 260
C...     YES, IT IS
       JTEMP1 = OPRAND(3)
       OPRAND(2) = OPRAND(2)**JTEMP1
       GO TO 270
C
C...     EXPONENT IS NOT AN INTEGER - IF VALUE TO BE EXPONENTIATED
C...     IS NEGATIVE, ERROR
  260       IF(OPRAND(2).LT.0.0) GO TO 180
C...     VALUE TO BE RAISED TO A POWER IS POSITIVE - EXPONENTIATE
       OPRAND(2) = OPRAND(2)**OPRAND(3)
C
C...     MOVE THIRD OPERATOR TO SECOND POSITION IN STACK
  270  JOPSTO(2) = JOPSTO(3)
C...     DECREMENT OPERATOR COUNT, AND GO TO TEST SECOND OPERATOR
C...     FOR ADDITION OR SUBTRACTION
       IOPNO = IOPNO - 1
C
C...     TWO OPERATIONS IN HOLD - IF SECOND IS ADDITION OR
C...     SUBTRACTION, COMBINE FIRST OPERAND WITH TERM SUMMATION
C...     ACCORDING TO FIRST OPERATOR
  300       IF(JOPSTO(2).GT.2) GO TO 350
C
C...     BRANCH ON OPERATOR TO ADD THIS TERM TO OR SUBTRACT IT
C...     FROM TOTAL SUMMATION
            IF(JOPSTO(1).EQ.2) GO TO 310
C
C...     ADD TERM JUST COMPLETED TO TOTAL SUMMATION
       OPRAND(1) = OPRAND(1) + OPRAND(2)
       GO TO 320
C
C...     SUBTRACT TERM JUST COMPLETED FROM TOTAL SUMMATION
  310  OPRAND(1) = OPRAND(1) - OPRAND(2)
C
C...     MOVE SECOND OPERATOR TO FIRST POSITION IN STACK
  320  JOPSTO(1) = JOPSTO(2)
C...     DECREMENT OPERATOR COUNT
       IOPNO = IOPNO - 1
C
C...     PUT LATEST OPERAND OBTAINED INTO HOLDING STACK
  350  OPRAND(IOPNO+1) = FNUM
C
C...     TEST FOR END OF STATEMENT - IF NOT, GO TO GET NEXT OPERATOR
            IF(INDXPT.LE.IPTLIM) GO TO 100
C...     IT IS - TEST FOR COMPLETION OF EVALUATION AND SUMMATION
C...     OF TERMS
            IF(IOPNO.NE.1) GO TO 360
C...     ONE OPERATOR IN HOLD - MAKE SURE IT IS A DUMMY OPERATOR,
C...     NOT ONE OF THOSE INPUT
            IF(JOPSTO(1).EQ.0) GO TO 370
C
C...     NO - SET UP A ZERO OPERATOR TO FORCE COMPLETION OF THE
C...     COMPUTATION, AND RETURN THROUGH EVALUATION LOOP UNTIL DONE
  360  JOPSTO(4) = 0
       GO TO 120
C
C..
C..   OUTPUT FINAL RESULT OF THIS EXPRESSION
  370 SCALR(ISTORE) = OPRAND(1)
            IF(KDBUG.EQ.0) GO TO 410
C...     IF DEBUG OUTPUT DESIRED, PRINT RESULT OF COMPUTATION
      WRITE (IOUTAP,400) SCALR(ISTORE)
  400 FORMAT (1H 'FINAL RESULT FROM  ACLS12  IS',F16.7//)
  410 RETURN
C..
C..
C...         ***                ****               ****         ****
C..
C..
C.. VOCABULARY WORD CAN ONLY BE A COMPUTING FUNCTION(PROTAP CLASS 8)
  500 IF(KRESLT.EQ.8) GO TO 501
      IF(KRESLT.NE.2) GO TO 955
      ISIGN = KRESLT
C...     MAKE SURE CODE IS WITHIN ALLOWABLE RANGE
C.. VOC. CODES TO KEEP IN MIND  -- LINE 7,2--CONE 10,8--REFSYS 1,8,0,0
  501 IF(KSTYPE.GT.15) GO TO 920
      IF(KSTYPE.LT.1) GO TO 920
C.. IT IS  -- SAVE VOC. SUBCLASS TYPE FOR LATER
C...     BRANCHING TO SPECIFIC FUNCTION PROCESSING
      JTEMP1 = KSTYPE
C
C...     COMPUTING FUNCTIONS AVAILABLE ARE ORDERED AS FOLLOWS -
C...           1.  DOTF   (VECTOR OR POINT, VECTOR OR POINT)
C...           2.  LNTHF  (VECTOR OR POINT)
C...           3.  SQRTF  (SCALAR)
C...           4.  SINF   (SCALAR)
C...           5.  COSF   (SCALAR)
C...           6.  EXPF   (SCALAR)
C...           7.  LOGF   (SCALAR)
C...           8.  ATANF  (SCALAR)
C...           9.  ABSF   (SCALAR)
C...          10.  ANGLF  (CIRCLE, POINT)
C...          11.  NUMF   (PATTERN)
C...          12.  LOG10F (SCALAR)
C..           13.  TANF   (SCALAR)
C..           14.  ATAN2F (SIN,COS)
C...          15.  DISTF  (LINE OR PLANE, LINE OR PLANE)
C..
C..
C
C..
C... FUNCTIONS MUST BE FOLLOWED BY A NEST ENTRY
C.. CODES FOR NESTS ARE AS FOLLOWS ........
C.. 3 SCALAR IN WORKING STORAGE,,5 SURF. IN WORKING STORAGE,,9 ARG.LIST
      IPT = 2*INDXPT-1
      IF(IPTPP(IPT) .EQ. 3) GO TO 520
      IF(IPTPP(IPT) .EQ. 5) GO TO 520
      IF (IPTPP(IPT).NE.9) GO TO 950
C... SET PTPP INDEX TO POINT TO THE NEXT AVAILABLE SLOT
      INDXPT = INDXPT + 2
C..   GET POINTER TO REFERENCE WORD IN CANON
      IPT = 2*(IPTPP(IPT+3)+ICANST-1)-1
C.. SAVE ARG. LIST TYPE...1 ALL SCALARS, 2 ALL SURF.,,3 MIXED, 9 ERROR
      LST = IPTPP(IPT+1)
      IF (LST.EQ.9) GO TO 1000
C..
C..  GET ADDRESS OF ARGUMENT STRING IN CANON
      IPT = IPTPP(IPT)
      IPT = 2*IPT-1
C..
C..   NUMBER OF INPUT ARGUMENTS
      NARG = IPTPP(IPT+1)
      IF(NARG.GT.2) GO TO 945
      IF(NARG.LT.1) GO TO 945
C.. SET LOC. OF FIRST 8-BYTE ENTRY IN CANON FOR THIS STRING
      L8 = (IPT+1)/2+1
C...  PICK UP NO. OF 8-BYTES WORDS TO BE MOVED FROM CANON
      NT = IPTPP(IPT)-1
C..  ONLY ALL SURF. OR ALL SCALAR INPUT ARGUMENTS ALLOWED
      IF(LST .LT. 1) GO TO 970
      IF(LST .GE. 3) GO TO 970
C..  PROCESS SINGLE INPUT ARGUMENTS, SCLAR
      IF(NARG .NE. 1) GO TO   510
      IF(LST .NE. 1) GO TO  502
C..  USING THE PROPER FUNCTION FOR A SINGLE SCALAR ARGUMENT
      IF(JTEMP1 .LE. 2) GO TO 979
      IF(JTEMP1 .GE. 14) GO TO 945
      IF(JTEMP1 .EQ. 10) GO TO 979
      IF(JTEMP1 .EQ. 11) GO TO 979
C.. SET FNUM TO SCALAR VALUE, AND BRANCH TO PROCESSING AREA
      FNUM = CANON(L8)
      GO TO 535
C..
C.. SINGLE SURFACE INPUT ARGUMENT, LEGAL ON LNTHF OR NUMF
C.. SET SURFACE PARAMETERS INTO DEFST/DEFANS AREA
  502 IOPRND(1) = IPTPP(IPT+3)
      IOPRND(2) = 0
      ISND = NT+4
      L8 = L8+1
C...
      DO 504 I=4,ISND
      DEFSTO(I) = CANON(L8)
  504 L8 = L8+1
C..
C.. BRANCH TO PROCESSING AREA
      IF(JTEMP1 .EQ. 2) GO TO 580
      IF(JTEMP1 .EQ. 11) GO TO 700
      GO TO 970
C...
C.. 2 INPUT ARG., ATAN2F REQUIRES SCALARS
C.. 2 SURFACES FOR DOTF, ANGLF, OR DISTF
  510 IF(JTEMP1 .EQ. 14) GO TO 690
      IF(LST .NE. 2) GO TO 970
      IF(JTEMP1 .EQ. 1) GO TO 540
      IF(JTEMP1 .EQ. 10) GO TO 720
      IF(JTEMP1 .EQ. 15) GO TO 740
C..
C...     PROCESSOR ERROR
  514 JSUBER = 6214
      GO TO 1000
C..
C..
C.. A DEFINED SURFACE IS AN ACCEPTABLE ARG. FOR LNTHF OR NUMF ONLY
  520 CALL AGTARG(DEFSTO(4),85,JPT)
      IF(JSUBER .NE. 0) GO TO 1000
      IF(JPT .EQ. 7) GO TO 1000
      IF(JPT .EQ. 1) GO TO 530
      IF(JPT .NE. 2) GO TO 970
      IF(JTEMP1.EQ.2) GO TO 580
      IF (JTEMP1.EQ.11) GO TO 700
      GO TO 945
C...
C.. TEST FOR FUNCTIONS REQUIRING SCALAR ARGUMENT AS INPUT
C..
  530 FNUM = DEFSTO(4)
  535 GO TO (979,979,600,610,620,630,640,650,660,979,979,670,680,945,979
     1) ,JTEMP1
C..
C...         ***                ****               ****         ****
C..
C..       D O T F
C...
C.. STORE FIRST SURFACE TO DOTF, ONLY A VECTOR OR POINT IS ALLOWABLE
  540 DO 550 I=1,4
      STORE(I) = CANON(L8)
  550 L8 = L8+1
C..
C..  ERROR IF SURFACE CODES DO NOT MATCH
      DO 560 I=1,4
      DEFSTO(I) = CANON(L8)
  560 L8 = L8+1
C..
      IF (DEFSTO(1).NE.STORE(1)) GO TO 980
C..
C..
         CALL ADOT(STORE(2),DEFSTO(2),FNUM)
C..
      GO TO 585
C..
C..
C...  L N T H F
C..
  580 IF(IOPRND(1) .EQ. 1) GO TO 581
      IF(IOPRND(1) .NE. 11) GO TO 970
  581 CALL ALNGTH(DEFSTO(4),FNUM)
C..
C..
C...         ***                ****               ****         ****
C..
C.. IS A NEG. SIGN PENDING
  585 IF(ISIGN.EQ.2) FNUM = -FNUM
      ISIGN = 0
C..
C.. IF THIS PTPP RECORD IS A COMPUTING EXPRESSION  -- PLACE FNUM IN
C.. THE OPERAND STACK AND GET THE ARITHMETIC OPERATOR (VIA BR TO 120)
C..
      GO TO 120
C..
C...         ***                ****               ****         ****
C..
C..
C..
C...           S Q U A R E  R O O T
C...     TEST FOR NEGATIVE OR ZERO ARGUMENT - IF NEGATIVE, ERROR
  600       IF(FNUM)  602, 585, 605
  602  JSUBER = 67
       FNUM = DABS(FNUM)
  605  FNUM = DSQRT(FNUM)
      GO TO 585
C
C...           S I N E
  610  FNUM = DSIN(FNUM*.01745329252)
      GO TO 585
C
C...           C O S I N E
  620  FNUM = DCOS(FNUM*.01745329252)
      GO TO 585
C
C...           E X P O N E N T I A T I O N
  630  FNUM = DEXP(FNUM)
      GO TO 585
C
C...           L O G A R I T H M
  640  FNUM = DLOG(FNUM)
      GO TO 585
C
C...           A R C T A N G E N T
  650  FNUM = DATAN(FNUM)*57.29577951289617
      GO TO 585
C
C...           A B S O L U T E  V A L U E
  660  FNUM = DABS(FNUM)
      GO TO 585
C
C...
C..          L O G 1 0 F (SCALAR)
C..
  670 FNUM = DLOG10(FNUM)
C..
      GO TO 585
C..
C..
C...         T A N F  (SCALAR)
C..
  680 FNUM = DTAN (FNUM/57.29577951289617)
C..
      GO TO 585
C..
C..
C..
C...      A T A N 2 F (SIN,COS)
C..
C...   ERROR BRANCH IF NOT SCALAR LIST  INPUT ARGUMENTS
  690 IF (LST.NE.1) GO TO 970
C.. STORE THE TWO INPUT SCALARS
      STORE(1) = CANON(L8)
      DEFSTO(1) = CANON(L8+1)
C..
      FNUM = DATAN2(STORE(1),DEFSTO(1))
      FNUM = FNUM * 57.29577951289617
C..
      GO TO 585
C..
C..
C...        N U M F (PATTERN)
C..   IS THE INPUT SURFACE THE REQUIRED PATTERN
  700 IF(IOPRND(1).NE.18) GO TO 970
C..
C..     YES  IT  IS
C..
       FNUM = (KDFANS(11)-1)/3
C..
      GO TO 585
C..
C..
C...       A N G L F (CIRCLE, POINT)
C..
C...
C..  STORE FIRST ARGUMENT,, ERROR IF NOT A CIRCLE
  720 DO 730 I=1,8
      STORE(I) = CANON(L8)
  730 L8 = L8+1
C..
      IF(KSTO(2).NE.4) GO TO 980
C.. SECOND ARGUMENT MUST BE A POINT
      DO 735 I=1,4
      DEFSTO(I) = CANON(L8)
  735 L8 = L8+1
C..
      IF (IOPRND(2).NE.1) GO TO 970
C..
C        POINT MUST NOT BE CONGRUENT WITH CENTER OF CIRCLE
      IF(DABS(STORE(2)-DEFSTO(2)).GT.1.0D-6) GO TO 737
      IF(DABS(STORE(3)-DEFSTO(3)).LE.1.0D-6) GO TO 970
  737 CONTINUE
C..
       FNUM = DATAN2((DEFSTO(3)-STORE(3)),(DEFSTO(2)-STORE(2)))
      FNUM = FNUM*57.29577951289617
      IF(FNUM.LT.0) FNUM = FNUM+360.0
C.. BRANCH TO PLACE FNUM INTO OPERAND STACK.
      GOTO 585
C..
C...       D I S T F ( LINE, LINE)
C..                  (PLANE,PLANE)
C..
C.. PUT SURFACES INTO NORMAL FORM USING ACANCK (ARG IN DEFANS), THEN
C.. SET UP 1ST SURFACE CANON FORM INTO STORE ARRAY, 2ND INTO DEFSTO
C..
  740 STORE(1) = CANON(L8)
      L8 = L8+1
      DO 742 I=1,4
      DEFANS(I) = CANON(L8)
  742 L8 = L8+1
      CALL ACANCK(KSTO(2))
      DO 745 I=1,4
  745 STORE(I+1) = DEFANS(I)
C..
      DEFSTO(1) = CANON(L8)
      L8 = L8+1
      DO 747 I=1,4
      DEFANS(I) = CANON(L8)
  747 L8 = L8+1
      CALL ACANCK(IOPRND(2))
      DO 750 I=1,4
  750 DEFSTO(I+1) = DEFANS(I)
C..
C.. DO WE HAVE A LINE OR PLANE
      IF(KSTO(2).EQ.2) GO TO 755
      IF(KSTO(2).NE.3) GO TO 970
C..
C...  DO INPUT SURFACE CODES MATCH
  755 IF(KSTO(2).NE.IOPRND(2)) GO TO 980
C..
C..  ARE THE VECTORS PARRALLEL
      CALL ADOT(STORE(2),DEFSTO(2),FNUM)
      IF  (DABS(DABS(FNUM)-1.0D0).GT.1.0D-8) GO TO 970
C..     ARE DIRECTIONS OPPOSITE OR THE SAME
      IF(FNUM) 765,760,760
C..
C.. DIRECTION ARE THE SAME
  760 FNUM = DABS(STORE(5)-DEFSTO(5))
         GO TO 585
C..
C.. DIRECTIONS ARE OPPOSITE
  765    FNUM = DABS(STORE(5)+DEFSTO(5))
         GO TO 585
C..
C..
C...         ***                ****               ****         ****
C..
C..
C...
C..
C
C...     ILLEGAL OR NO PUNCTUATION FOUND WHERE OPERATOR REQUIRED
  900  JSUBER = 54
       GO TO 1000
C..
C
C...     EXPRESSION ENDED WITH OPERATOR NOT FOLLOWED BY OPERAND
  910  JSUBER = 53
       GO TO 1000
C
C...     OPERAND WAS NOT A SCALAR OR A LEGAL VOCABULARY WORD
  920  JSUBER = 61
       GO TO 1000
C
C...     MORE CONSECUTIVE EXPONENTIATION OPERATIONS THAN ALLOWABLE
  930  JSUBER = 56
       GO TO 1000
C
C...     ATTEMPT MADE TO DIVIDE BY ZERO VALUE
  940  JSUBER = 63
       GO TO 1000
C..
C..
C...  IMPROPER NUMBER OF ARGUMENTS GIVEN FOR THIS ARITHMETIC FUNCTION
  945 JSUBER = 65
      GO TO 1000
C..
C..
C
C...     NO NEST FOUND IMMEDIATELY FOLLOWING A COMPUTING FUNCTION
  950  JSUBER = 59
       GO TO 1000
C
C..   ILLEGAL USE OF A VOCABULARY WORD
  955  JSUBER = 76
       GO TO 1000
C
C..
C..
C.. ILLEGAL ARGUMENT GIVEN FOR AN ARITHMETIC FUNCTION
  970 JSUBER = 66
      GO TO 1000
C..
C..
C.. PARAMETER SHOULD HAVE BEEN A SURFACE
  979 JSUBER = 79
      GO TO 1000
C..
C..
C.. SURFACE CODES DO NOT MATCH.
  980 JSUBER = 80
      GO TO 1000
C...
C..  VARIABLE IS A PREVIOUSLY DEFINED STATEMENT I.D.
  985 JSUBER = 251
      ENAME = FNUM
      GO TO 1000
C...
C...
C... ERROR RETURN PUT SPECIAL CODE INTO SCALAR RESULTS SLOT
C...
 1000 ISTORE = 2*ISTORE-1
      ISCALR(ISTORE) = 0
      ISCALR(ISTORE+1) = 9
      RETURN
      END

