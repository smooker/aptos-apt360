      SUBROUTINE ASEGMT
C     *** THIS PROGRAM LAST MODIFIED FOR VERSION 4,MODIFICATION 4 ***
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION RFP(3),RTE(3),APNT(3)
C***
C     SPECIAL COMMON FOR 2 DIMENSIONAL PACKAGE-- USES PROTAPE BUFFER
C     READ AREA WHICH IS AVAILABLE AT ARLM2 TIME AS SCRATCH
C***
C     NOTE... VARIABLES IER,VTEM,VNUL ARE NOT THE SAME AS IN THE MAIN
C     STREAM ARITHMETIC ELEMENT
C     ALSO EX,EY,EZ,VNUL
      COMMON/A2CMMN/DUMMY(1308) ,CSCF(3) ,DSCF(3) ,CFTEM(3) ,VTEM(3) ,
     1PTEM1(3)  ,PTEM2(3)  ,PT(3,6)   ,DOT(6)    ,FPNT(3)   ,TE2D(3)   ,
     2TI2D(3)   ,CR        ,THDS      ,THCS      ,TAUDS     ,TAUCS     ,
     3PERCEN    ,ANS       ,RES       ,PNTTAN(3) ,EX(3)     ,EY(3)     ,
     4EZ(3)     ,VNUL(3)   ,
     5ICSCF     ,IDSCF     ,ITOPT     ,N         ,IDONE     ,NREV      ,
     6ITFAR     ,ITC       ,IOC       ,IPC       ,INTP      ,IER       ,
     7NINT      ,ICASE     ,ITAN
      COMMON/A2DYDP/ KDYNFQ(12), NKFQ
      COMMON/A2FPC / Q15X01,QP9X01    ,QP6X01    ,QP5X01    ,QP4X01    ,
     1QP0001    ,QP001     ,QP01      ,QP1       ,Q1P       ,Q10P      ,
     2Q1000P    ,Q1PE5     ,Q1PE6     ,Q1PE10    ,Q1PE20    ,Q1PE30    ,
     3Q1PE36    ,Q1PE38    ,QP8X01    ,QP7X01    ,
     4QP4X09    ,QP9       ,QP99      ,QP995     ,QP997     ,QP999     ,
     5QP9999    ,QP4X95    ,QP5X95    ,QP6X9     ,QP7X9     ,
     6QP6X05    ,QP5X05    ,QP4X05    ,QP0005    ,QP005     ,QP05      ,
     7QP5       ,Q5P       ,                                 Q4X045    ,
     8QP0002    ,QP0047    ,QP017     ,Q1RAD     ,QP0349    ,QP125     ,
     9QP6       ,QP2       ,QP2499    ,QP25      ,QP3
      COMMON/A2FPC / QP7   ,QP75      ,QP8       ,QP866     ,Q1P01     ,
     1Q1P1      ,Q1P2      ,Q1P25     ,Q1P5      ,Q2P       ,Q2P5      ,
     2Q3P       ,Q3P5      ,Q4P       ,Q8P       ,Q11P      ,Q45P      ,
     3Q90P      ,Q130P     ,Q4500P    ,Q9000P    ,QP02      ,QNUL      ,
     4QPIE      ,Q100P     ,QFIL(8)
C      SEGMENTS A CIRCULAR DRIVE SURFACE
C      GENERAL CALCULATION PROCEESS IS AS FOLLOWS...
C      INITIALLY, SET UP SOME VALUES TO BE USED LATER
C      RBIG IS LARGE RADIUS RSMAL IS SMALL RADIUS OF TOLERANCE BAND
C      RTE IS VECTOR FROM CENTER OF CIRCLE TO TE POSITION
C      F   RFP IS VECTOR FROM CENTER TO FINAL POINT FPNT
C      SET UP SENSE = + OR - 1. FOR CLOCKWISE OR COUNTERCLOCKWISE
C      MOTION REQUIRED.      THEN COMPUTE THE ANGULAR DIFFERENCE
C      BETWEEN THE POINTS  DELTAN
C      WHICH HAS BEEN CORRECTED FOR MULTIPLE REVOLUTIONS
C      ALSO COMPUTE THE MAXIMUM ALLOWABLE ANCLE  DECIDE WOW MANY
C     STEPS ARE REQUIRED, AND SEGMENT
C      DO NOT OUPUT THE LAST POINT, AS THAT IS DONE BY ARLMI
      IF(ITOPT .EQ. 4) TAUDS = TAUDS - QP4X05
      RBIG = DSCF(3) + (TAUDS)*(Q100P - PERCEN)/Q100P
      RLIT = DSCF(3) - (TAUDS)*(PERCEN/Q100P)
      CALL AVSUB(TE2D,DSCF,RTE)
      CALL AVSUB(FPNT,DSCF,RFP)
C...NECESSARY TO AVOID PROBLEM OF COMPUTATIONAL NOISES
      CALL AVSUB(TE2D,FPNT,VTEM)
      CALL AVLENG(VTEM,ANS)
      IF(ANS .LT. (QP0001 * TAUCS)) CALL AVSTO(RTE,RFP)
      RTE(3) = QNUL
      RFP(3) = QNUL
      CALL AVCROS(RTE,TI2D,VTEM)
      SENSE= Q1P
      IF(VTEM(3).LT.QNUL) SENSE = -Q1P
C
C      -1. FOR CLOCKWISE ... +1. FOR COUNTERCLOCKWISE
C      TEANG IS ANGLE IN RADIANS TO TE LOCATION
      A1 = RTE(2)
      A2 = RTE(1)
      TEANG = DATAN2(A1,A2)
C      FPANG IS TO FINAL POINT
      A1 = RFP(2)
      A2 = RFP(1)
      FPANG = DATAN2(A1,A2)
C
C      ALOWAN = ALOWABLE ANGLE
C      BUT ONLY FOR U/I OF A FULL CUT LENGTH
      ALOWAN = DSQRT(RBIG**2 - RLIT**2)/RLIT
      ALOWAN = DATAN(ALOWAN)
C      = U    1/2 OF STEP ANGLE ALLOWED
C      NOW GET DELANG   ...   ANGULAR DIFFERENCE TO GO
C      THERE ARE FOUR CASES   TEANG LESSTHAN FPANG AND COUNTER CLOCKWISE
C                             TEANG GREATER THAN FPANG AND COUNTER CKWSE
C                             TEANG LESS THAN FPANG AND CLOCKWISE
C                             TEANG GREATER THAN  FPANG AND CLOCKWISE
C
C
      DELANG = SENSE*(FPANG-TEANG)
C
C      CASE 1    DELANG IS POSITIVE AND FINAL
C      CASE 2      DELANG IS NEGATIVE AND NOT FINAL
C      CASE 3      DELANG IS NEGATIVE AND NOT FINAL
C      CASE 4  DELANG IS POSITIVE AND FINAL
C
      PI = QPIE
      IF(DELANG) 3,4,4
    3 DELANG = Q2P*PI+DELANG
      GO TO 5
    4 CALL AVSUB(FPNT,TE2D,VTEM)
      CALL AVLENG(VTEM,STANG)
      IF(STANG .GE. (TAUCS*0.5D0)) GO TO 5
      IF((N.EQ.1).AND.(ITOPT.EQ.4).AND.(NREV.EQ.1)) GO TO 5
      NREV = NREV + 1
    5 CONTINUE
C  NOW GET NUMBER OF HALF STEPS TO TAKE
      ANSTEP = (DELANG +    (DFLOAT(NREV))*Q2P*PI)/ALOWAN
C      ROUND THIS UP TO THE NEAREST INTERER
      NSTEP = ANSTEP + Q1P
C      HAVING ROUNDED  UP TO THE NEAREST INTEGER, NOW ROUND UP AGAIN TO
C      NEAREST EVEN INTEGER.  THE REASON FOR THIS IS AS FOLLOWS.
C      NEITHER THE FIRST POINT,TE, NOR THE LAST POINT FPNT ARE
C      EXACTLY ON THE OUTSIDE OF THE TOLERANCE BAND.  THEREFORE,
C      IN ORDER TO BE SURE AND NOT VIOLATE THE SURFACE, THE FIRST
C      AND LAST STEPS MUST BE 1/2 STEPS.(1/2 OF THE MAXIMUM ALLOWED
C      STEPPING ANGLE..    THIS ALLOWS THE DO LOOP BELOW, WHICH PUTS OUT
C      THE FIRST, THIRD, FIFTH, ETC. HALF STEPS TO STOP LEAVING
C      EXACTLY ONE-HALF STEP LEFT TO THE FINAL POINT
C      MOREOVER, BETWEEN THE FIRST  AND THIRD HALF-STEP POINTS, THERE IS
C      JUST EXACTLY ONE FULL STEP.  (FIGGURES YOU SAY...)
C      MOREOVER, CONSIDER THE SITUATION WHEN THE COMPUTED ANGULAR DIFFER
C      BETWEEN THE FIRST AND LAST POINTS IS SUCH THAT THE ENTIRE
C      STEP COULD BE MADE AT ONCE.  THAT STILL DOES NOT SOLVE THE
C      PROBLEM, BECAUSEPOINTS MAY BE EXACTLY ON THE INNER TOLERANCE
C      BAND, AND SUCH A SINGLE STEP WOULD GOUGE THE SURFACE.  THAT CASE
C      CAUSE NSTEP TO BE COMPUTED AS 1, ROUNDED UP TO 2, AND A
C      POINT EXACTLY ON THE OUTER TOLERANCE BAND HALF WAY BETWEEN THE
C      TWO POINTS WOULD BE OUTPUT.
C      BEFORE THE FINAL POINT WAS OUTPUT, THUS SOLVING THE PROBLEM
      NSTEP = NSTEP + MOD(NSTEP,2)
C      GET ACTUL SPETTING ANGLE
      STANG = (DELANG+   (DFLOAT(NREV))*Q2P*PI)/   (DFLOAT(NSTEP))
C      STEP OFF AND OUTPUT
      IF(NSTEP .EQ. 0) RETURN
      DO 100  I=1,NSTEP,2
C       ONLY OUTPUTTING EVERY OTHER, BECAUSE ALOWAN WAS FOR HALF STEP
      AI = I
      DAI = AI
      RANG =  TEANG + SENSE*DAI*STANG
      APNT(1) = DSCF(1) + RBIG*DCOS(RANG)
      APNT(2) = DSCF(2) + RBIG*DSIN(RANG)
      APNT(3) = QNUL
      IF(NSTEP.GT.2) GO TO 99
      CALL AVSUB(APNT,FPNT,VTEM)
      CALL AVNORM(VTEM,VTEM,IER)
      IF(IER.EQ.1) GO TO 100
   99 CONTINUE
      CALL AZCOR(APNT,0)
  100 CONTINUE
      RETURN
      END

